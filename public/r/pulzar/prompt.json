{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pulzar/prompt",
  "type": "registry:block",
  "title": "Pulzar Prompt",
  "description": "Wrapper de PromptInput con botón de voz opcional.",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "https://registry.ai-sdk.dev/all.json",
    "select",
    "tooltip",
    "utils"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/pulzar/prompt/prompt.tsx",
      "content": "import React from \"react\"\nimport PromptTextarea from \"./prompt-textarea\"\nimport PromptWebButton from \"./prompt-button-web\"\nimport PromptReasoningButton from \"./prompt-button-reasoning\"\nimport PromptVoiceButton from \"./prompt-button-voice\"\nimport PromptSendButton from \"./prompt-button-send\"\nimport PromptAttachButton from \"./prompt-button-attach\"\nimport PromptFileChip, { type PromptAttachment } from \"./prompt-file-chip\"\nimport { cn } from \"@/lib/utils\"\n\nexport function Prompt({\n  value,\n  onChange,\n  onSubmit,\n  onToggleVoice,\n  reasoningLevel,\n  onChangeReasoning,\n  webSearch,\n  onToggleWeb,\n  status,\n  onFilesSelected,\n  isUploading,\n  attachments,\n  onRemoveAttachment,\n}: {\n  value: string\n  onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void\n  onSubmit: (e: React.FormEvent) => void\n  onToggleVoice?: () => void\n  reasoningLevel?: 0 | 1 | 2 | 3\n  onChangeReasoning?: (v: 0 | 1 | 2 | 3) => void\n  webSearch?: boolean\n  onToggleWeb?: () => void\n  status?: \"idle\" | \"submitted\" | \"streaming\" | \"error\"\n  onFilesSelected?: (files: FileList) => void\n  isUploading?: boolean\n  attachments?: PromptAttachment[]\n  onRemoveAttachment?: (id: string) => void\n}) {\n  const isDirty = (value || \"\").trim().length > 0\n  const fileInputRef = React.useRef<HTMLInputElement>(null)\n  function handleAttachClick() {\n    fileInputRef.current?.click()\n  }\n  function handleFileChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const files = e.target.files\n    if (files && onFilesSelected) {\n      onFilesSelected(files)\n      e.currentTarget.value = \"\"\n    }\n  }\n  return (\n    <form onSubmit={onSubmit} className=\"mt-2\">\n      <div className=\"border rounded-2xl overflow-hidden bg-white dark:bg-background\">\n        {Array.isArray(attachments) && attachments.length > 0 && (\n          <div className=\"flex flex-wrap items-center px-3 pt-2 pb-1 gap-1\">\n            {attachments.map((f) => (\n              <PromptFileChip key={f.id} file={f} onRemove={onRemoveAttachment} />\n            ))}\n          </div>\n        )}\n        <PromptTextarea value={value} onChange={onChange} />\n        <div className={cn(\"flex items-center justify-between gap-2 px-4 py-4\")}> \n          <div className=\"flex items-center gap-2\">\n            <PromptWebButton active={Boolean(webSearch)} onToggle={onToggleWeb} />\n            <PromptReasoningButton value={reasoningLevel} onChange={onChangeReasoning as any} />\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <input ref={fileInputRef} type=\"file\" className=\"hidden\" multiple onChange={handleFileChange} />\n            <PromptAttachButton onClick={handleAttachClick} />\n            {onToggleVoice && <PromptVoiceButton onClick={onToggleVoice} />}\n            <PromptSendButton disabled={!isDirty || Boolean(isUploading)} status={status} />\n          </div>\n        </div>\n      </div>\n    </form>\n  )\n}\n\n\n",
      "type": "registry:component",
      "target": "components/pulzar/prompt/prompt.tsx"
    },
    {
      "path": "registry/new-york/blocks/pulzar/prompt/prompt-textarea.tsx",
      "content": "\"use client\"\r\n\r\nimport React, { KeyboardEventHandler, useEffect, useRef } from \"react\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nexport type PromptTextareaProps = React.ComponentProps<\"textarea\"> & {\r\n  minHeight?: number\r\n  maxHeight?: number\r\n}\r\n\r\nexport function PromptTextarea({\r\n  className,\r\n  placeholder = \"What would you like to know?\",\r\n  minHeight = 64,\r\n  maxHeight = 192,\r\n  onChange,\r\n  ...props\r\n}: PromptTextareaProps) {\r\n  const ref = useRef<HTMLTextAreaElement>(null)\r\n\r\n  useEffect(() => {\r\n    const el = ref.current\r\n    if (!el) { return }\r\n    el.style.height = \"auto\"\r\n    const next = Math.min(el.scrollHeight, maxHeight)\r\n    el.style.height = `${next}px`\r\n  }, [props.value, maxHeight])\r\n  const handleKeyDown: KeyboardEventHandler<HTMLTextAreaElement> = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      if ((e as any).nativeEvent?.isComposing) {\r\n        return\r\n      }\r\n      if (e.shiftKey) {\r\n        return\r\n      }\r\n      e.preventDefault()\r\n      const form = e.currentTarget.form\r\n      if (form) {\r\n        form.requestSubmit()\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <textarea\r\n      ref={ref}\r\n      name=\"message\"\r\n      placeholder={placeholder}\r\n      onChange={(e) => onChange?.(e)}\r\n      onKeyDown={handleKeyDown}\r\n      style={{ minHeight, maxHeight }}\r\n      className={cn(\r\n        \"w-full resize-none rounded-none border-0 p-3 text-base\",\r\n        \"bg-white text-foreground placeholder:text-muted-foreground\",\r\n        \"dark:bg-transparent dark:text-foreground dark:placeholder:text-muted-foreground\",\r\n        \"shadow-none outline-none ring-0 focus-visible:ring-0\",\r\n        \"field-sizing-content\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport default PromptTextarea\r\n\r\n\r\n",
      "type": "registry:component",
      "target": "components/pulzar/prompt/prompt-textarea.tsx"
    },
    {
      "path": "registry/new-york/blocks/pulzar/prompt/prompt-button.tsx",
      "content": "import React from \"react\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nexport interface PromptButtonProps {\r\n  children?: React.ReactNode\r\n  className?: string\r\n  title?: string\r\n  ariaLabel?: string\r\n  type?: \"button\" | \"submit\"\r\n  disabled?: boolean\r\n  active?: boolean\r\n  onClick?: () => void\r\n}\r\n\r\nexport function PromptButton({ children, className, title, ariaLabel, type, disabled, active, onClick }: PromptButtonProps) {\r\n  const buttonType = type ? type : \"button\"\r\n  const isActive = Boolean(active)\r\n\r\n  return (\r\n    <button\r\n      type={buttonType}\r\n      title={title}\r\n      aria-label={ariaLabel || title}\r\n      disabled={disabled}\r\n      data-active={isActive ? \"true\" : \"false\"}\r\n      onClick={onClick}\r\n      className={cn(\r\n        \"h-9 w-9 px-0 grid place-items-center rounded-lg border\",\r\n        \"border-border bg-background text-foreground p-0\",\r\n        \"hover:bg-accent/30 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-accent\",\r\n        \"disabled:opacity-50 disabled:pointer-events-none\",\r\n        \"data-[active=true]:bg-accent/40 data-[active=true]:border-accent\",\r\n        className\r\n      )}\r\n    >\r\n      {children}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default PromptButton\r\n\r\n\r\n",
      "type": "registry:component",
      "target": "components/pulzar/prompt/prompt-button.tsx"
    },
    {
      "path": "registry/new-york/blocks/pulzar/prompt/prompt-button-web.tsx",
      "content": "import React from \"react\"\r\nimport { Globe } from \"lucide-react\"\r\nimport { PromptButton } from \"./prompt-button\"\r\n\r\nexport function PromptWebButton({ active, onToggle }: { active?: boolean; onToggle?: () => void }) {\r\n  return (\r\n    <PromptButton\r\n      title={active ? \"Web habilitado\" : \"Habilitar búsqueda web\"}\r\n      ariaLabel=\"Búsqueda web\"\r\n      active={Boolean(active)}\r\n      onClick={onToggle}\r\n    >\r\n      <Globe className=\"h-4 w-4\" />\r\n    </PromptButton>\r\n  )\r\n}\r\n\r\nexport default PromptWebButton\r\n\r\n\r\n",
      "type": "registry:component",
      "target": "components/pulzar/prompt/prompt-button-web.tsx"
    },
    {
      "path": "registry/new-york/blocks/pulzar/prompt/prompt-button-reasoning.tsx",
      "content": "import React from \"react\"\nimport { cn } from \"@/lib/utils\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Tooltip, TooltipContent, TooltipTrigger } from \"@/components/ui/tooltip\"\nimport { Info } from \"lucide-react\"\n\ntype ReasoningLevel = 0 | 1 | 2 | 3\n\ninterface ModeDef {\n  value: ReasoningLevel\n  name: string\n  headline: string\n  details: string\n}\n\nconst MODES: ModeDef[] = [\n  {\n    value: 0,\n    name: \"Apagado\",\n    headline: \"Sin razonamiento adicional\",\n    details: \"Respuestas más rápidas y económicas. No incluye pasos intermedios ni justificaciones.\",\n  },\n  {\n    value: 1,\n    name: \"Básico\",\n    headline: \"Razonamiento ligero\",\n    details: \"Buen equilibrio entre costo y calidad. Traza breve cuando es útil.\",\n  },\n  {\n    value: 2,\n    name: \"Equilibrado\",\n    headline: \"Estructura y justificaciones moderadas\",\n    details: \"Ideal para tareas con varios pasos. Precisión y contexto razonables.\",\n  },\n  {\n    value: 3,\n    name: \"Profundo\",\n    headline: \"Análisis detallado\",\n    details: \"Cadenas de pensamiento extensas. Mayor costo y posible mayor latencia.\",\n  },\n]\n\nfunction Bars({ level }: { level: ReasoningLevel }) {\n  const on = \"bg-primary border-primary\"\n  const off = \"bg-transparent border-border\"\n  return (\n    <div className=\"flex items-end gap-[2px]\">\n      <span className={[\"inline-block h-[6px] w-[6px] rounded-[2px] border\", level >= 1 ? on : off].join(\" \")}></span>\n      <span className={[\"inline-block h-[9px] w-[6px] rounded-[2px] border\", level >= 2 ? on : off].join(\" \")}></span>\n      <span className={[\"inline-block h-[12px] w-[6px] rounded-[2px] border\", level >= 3 ? on : off].join(\" \")}></span>\n    </div>\n  )\n}\n\nexport function PromptReasoningButton({ value, onChange }: { value?: ReasoningLevel; onChange?: (v: ReasoningLevel) => void }) {\n  const level: ReasoningLevel = typeof value === \"number\" ? value : 1\n\n  function handleChange(next: string) {\n    const parsed = Number(next) as ReasoningLevel\n    if (onChange) {\n      onChange(parsed)\n    }\n  }\n\n  const active = level > 0\n  const current = MODES.find(m => m.value === level) || MODES[1]\n\n  return (\n    <Select value={String(level)} onValueChange={handleChange}>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <SelectTrigger\n            aria-label=\"Razonamiento\"\n            title=\"Razonamiento\"\n            className={cn(\n              \"h-9 w-9 min-w-0 shrink-0 aspect-square grid place-items-center rounded-lg border p-0\",\n              \"border-border bg-background text-foreground\",\n              \"hover:bg-accent/30 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-accent\",\n              \"disabled:opacity-50 disabled:pointer-events-none\",\n              \"[&_svg]:hidden\",\n              active ? \"bg-accent/40 border-accent\" : undefined\n            )}\n          >\n            <SelectValue asChild>\n              <div>\n                <Bars level={level} />\n              </div>\n            </SelectValue>\n          </SelectTrigger>\n        </TooltipTrigger>\n        <TooltipContent sideOffset={6}>\n          <div className=\"max-w-64\">\n            <div className=\"font-medium\">Razonamiento: {current.name}</div>\n            <div className=\"opacity-90\">\n              {current.headline}\n            </div>\n          </div>\n        </TooltipContent>\n      </Tooltip>\n      <SelectContent>\n        {MODES.map(mode => (\n          <SelectItem key={mode.value} value={String(mode.value)} className=\"pr-10\">\n            <div className=\"flex w-full items-start gap-3\">\n              <div className=\"mt-0.5\">\n                <Bars level={mode.value} />\n              </div>\n              <div className=\"flex-1\">\n                <div className=\"text-sm font-medium leading-none\">{mode.name}</div>\n                <div className=\"text-xs text-muted-foreground leading-snug\">{mode.headline}</div>\n              </div>\n              <div className=\"ml-auto pl-2\">\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <button type=\"button\" className=\"text-muted-foreground/80 hover:text-foreground p-1 rounded-md border border-transparent hover:border-border\">\n                      <Info className=\"size-3.5\" />\n                    </button>\n                  </TooltipTrigger>\n                  <TooltipContent sideOffset={6}>\n                    <div className=\"text-left max-w-72\">\n                      <div className=\"font-medium mb-0.5\">{mode.name}</div>\n                      <div className=\"opacity-90 mb-1\">{mode.details}</div>\n                      <ul className=\"list-disc pl-4 space-y-0.5\">\n                        <li>Uso recomendado: {mode.value === 0 ? \"consultas simples\" : mode.value === 1 ? \"tareas cotidianas\" : mode.value === 2 ? \"análisis con varios pasos\" : \"investigación y diagnóstico\"}</li>\n                        <li>Coste relativo: {mode.value === 0 ? \"Muy bajo\" : mode.value === 1 ? \"Bajo\" : mode.value === 2 ? \"Medio\" : \"Alto\"}</li>\n                      </ul>\n                    </div>\n                  </TooltipContent>\n                </Tooltip>\n              </div>\n            </div>\n          </SelectItem>\n        ))}\n      </SelectContent>\n    </Select>\n  )\n}\n\nexport default PromptReasoningButton\n\n\n",
      "type": "registry:component",
      "target": "components/pulzar/prompt/prompt-button-reasoning.tsx"
    },
    {
      "path": "registry/new-york/blocks/pulzar/prompt/prompt-button-voice.tsx",
      "content": "import React from \"react\"\r\nimport { Mic } from \"lucide-react\"\r\nimport { PromptButton } from \"./prompt-button\"\r\n\r\nexport function PromptVoiceButton({ onClick }: { onClick?: () => void }) {\r\n  return (\r\n    <PromptButton title=\"Mandar audio\" ariaLabel=\"Mandar audio\" onClick={onClick}>\r\n      <Mic className=\"h-4 w-4\" />\r\n    </PromptButton>\r\n  )\r\n}\r\n\r\nexport default PromptVoiceButton\r\n\r\n\r\n",
      "type": "registry:component",
      "target": "components/pulzar/prompt/prompt-button-voice.tsx"
    },
    {
      "path": "registry/new-york/blocks/pulzar/prompt/prompt-button-attach.tsx",
      "content": "import React from \"react\"\r\nimport { Paperclip } from \"lucide-react\"\r\nimport { PromptButton } from \"./prompt-button\"\r\n\r\nexport function PromptAttachButton({ onClick }: { onClick?: () => void }) {\r\n  return (\r\n    <PromptButton title=\"Adjuntar\" ariaLabel=\"Adjuntar\" onClick={onClick}>\r\n      <Paperclip className=\"h-4 w-4\" />\r\n    </PromptButton>\r\n  )\r\n}\r\n\r\nexport default PromptAttachButton\r\n\r\n\r\n",
      "type": "registry:component",
      "target": "components/pulzar/prompt/prompt-button-attach.tsx"
    },
    {
      "path": "registry/new-york/blocks/pulzar/prompt/prompt-file-chip.tsx",
      "content": "import React from \"react\"\r\nimport { X, Loader2, FileText, FileSpreadsheet, File as FileGeneric, FileImage, FileAudio, FileVideo, FileArchive } from \"lucide-react\"\r\n\r\nexport type PromptAttachment = {\r\n  id: string\r\n  name: string\r\n  size?: string\r\n  previewURL?: string\r\n  url?: string\r\n  type?: string\r\n  status: \"uploading\" | \"done\" | \"error\"\r\n}\r\n\r\nfunction formatSize(bytes?: number): string | undefined {\r\n  if (!bytes && bytes !== 0) { return undefined }\r\n  const k = 1024\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k))\r\n  const sizes = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\"]\r\n  const value = (bytes / Math.pow(k, i)).toFixed(1)\r\n  return `${value} ${sizes[i]}`\r\n}\r\n\r\nexport function PromptFileChip({ file, onRemove }: { file: PromptAttachment; onRemove?: (id: string) => void }) {\r\n  function getIcon() {\r\n    const name = (file.name || \"\").toLowerCase()\r\n    const ext = name.split(\".\").pop() || \"\"\r\n    const type = (file.type || \"\").toLowerCase()\r\n\r\n    if (type.startsWith(\"image/\") || [\"png\",\"jpg\",\"jpeg\",\"gif\",\"webp\",\"svg\"].includes(ext)) {\r\n      return <FileImage className=\"h-4 w-4 text-blue-500\" />\r\n    }\r\n    if (type.startsWith(\"audio/\") || [\"mp3\",\"wav\",\"m4a\",\"ogg\"].includes(ext)) {\r\n      return <FileAudio className=\"h-4 w-4 text-purple-500\" />\r\n    }\r\n    if (type.startsWith(\"video/\") || [\"mp4\",\"mov\",\"webm\",\"mkv\"].includes(ext)) {\r\n      return <FileVideo className=\"h-4 w-4 text-indigo-500\" />\r\n    }\r\n    if (ext === \"pdf\" || type === \"application/pdf\") {\r\n      return <FileText className=\"h-4 w-4 text-red-500\" />\r\n    }\r\n    if ([\"xlsx\",\"xls\",\"csv\"].includes(ext) || type.includes(\"spreadsheet\") || type === \"text/csv\") {\r\n      return <FileSpreadsheet className=\"h-4 w-4 text-green-600\" />\r\n    }\r\n    if ([\"doc\",\"docx\"].includes(ext)) {\r\n      return <FileText className=\"h-4 w-4 text-blue-600\" />\r\n    }\r\n    if ([\"zip\",\"rar\",\"7z\",\"tar\",\"gz\"].includes(ext)) {\r\n      return <FileArchive className=\"h-4 w-4 text-amber-600\" />\r\n    }\r\n    return <FileGeneric className=\"h-4 w-4 text-muted-foreground\" />\r\n  }\r\n\r\n  return (\r\n    <div className={[\"inline-flex items-center gap-2 max-w-full px-2 py-1 mr-2 rounded-md border bg-muted/40 text-foreground\"].join(\" \")}> \r\n      {file.status === \"uploading\" ? (\r\n        <Loader2 className=\"h-4 w-4 animate-spin text-muted-foreground\" />\r\n      ) : getIcon()}\r\n      <span className=\"text-xs truncate max-w-[160px] text-foreground\" title={file.name}>{file.name}</span>\r\n      {file.size && <span className=\"text-xs text-muted-foreground\">{file.size}</span>}\r\n      {file.status === \"error\" && <span className=\"text-xs text-destructive\">Error</span>}\r\n      {onRemove && (\r\n        <button type=\"button\" className=\"ml-1 text-muted-foreground hover:text-foreground\" onClick={() => onRemove(file.id)} aria-label=\"Eliminar archivo\">\r\n          <X className=\"h-3.5 w-3.5\" />\r\n        </button>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PromptFileChip\r\n\r\n\r\n",
      "type": "registry:component",
      "target": "components/pulzar/prompt/prompt-file-chip.tsx"
    }
  ]
}