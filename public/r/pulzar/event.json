{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pulzar/event",
  "type": "registry:block",
  "title": "Pulzar Event",
  "description": "Wrapper universal de eventos: mensaje, fuentes, código, imágenes, reasoning, tools, etc.",
  "registryDependencies": [
    "https://registry.ai-sdk.dev/all.json"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/pulzar/event.tsx",
      "content": "\"use client\"\n\nimport React from \"react\"\nimport { Message as AIMessage, MessageContent as AIMessageContent } from \"@/components/ai-elements/message\"\nimport { Response } from \"@/components/ai-elements/response\"\nimport { Reasoning, ReasoningContent, ReasoningTrigger } from \"@/components/ai-elements/reasoning\"\nimport { Sources, SourcesContent, SourcesTrigger, Source } from \"@/components/ai-elements/source\"\nimport { CodeBlock } from \"@/components/ai-elements/code-block\"\nimport { Image as AIImage } from \"@/components/ai-elements/image\"\nimport { InlineCitation } from \"@/components/ai-elements/inline-citation\"\nimport { Loader } from \"@/components/ai-elements/loader\"\nimport { Suggestion } from \"@/components/ai-elements/suggestion\"\nimport { Task } from \"@/components/ai-elements/task\"\nimport { Tool } from \"@/components/ai-elements/tool\"\nimport { WebPreview } from \"@/components/ai-elements/web-preview\"\n\nexport function Event({ role, parts, isStreaming }: { role: string; parts: Array<any>; isStreaming?: boolean }) {\n  return (\n    <AIMessage from={role as any}>\n      <AIMessageContent>\n        {parts.map((part: any, i: number) => {\n          try {\n            switch (part?.type) {\n              case 'text':\n                return <Response key={i}>{String(part.text ?? '')}</Response>\n              case 'reasoning':\n                return (\n                  <Reasoning key={i} className=\"w-full\" isStreaming={!!isStreaming}>\n                    <ReasoningTrigger />\n                    <ReasoningContent>{String(part.text ?? '')}</ReasoningContent>\n                  </Reasoning>\n                )\n              case 'source-url':\n                return (\n                  <Sources key={i}>\n                    <SourcesTrigger count={1} />\n                    <SourcesContent>\n                      <Source href={String(part.url || '#')} title={String(part.url || '')} />\n                    </SourcesContent>\n                  </Sources>\n                )\n              case 'code':\n                return <CodeBlock key={i} language={String(part.language || 'tsx')} code={String(part.code || part.text || '')} />\n              case 'image':\n                return <AIImage key={i} alt={String(part.alt || 'image')} src={String(part.url || part.src || '')} />\n              case 'inline-citation':\n                return <InlineCitation key={i} text={String(part.text || '')} sources={Array.isArray(part.sources) ? part.sources : []} />\n              case 'loader':\n                return <Loader key={i} />\n              case 'suggestion':\n                return <Suggestion key={i} text={String(part.text || '')} />\n              case 'task':\n                return <Task key={i} status={String(part.status || '')} title={String(part.title || '')} />\n              case 'tool':\n                return <Tool key={i} name={String(part.name || '')} status={String(part.status || '')} />\n              case 'web-preview':\n                return <WebPreview key={i} url={String(part.url || '')} />\n              default:\n                return null\n            }\n          } catch (_) {\n            return <Response key={i}>{JSON.stringify(part)}</Response>\n          }\n        })}\n      </AIMessageContent>\n    </AIMessage>\n  )\n}\n\n\n",
      "type": "registry:component",
      "target": "components/pulzar/event.tsx"
    }
  ]
}