{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pulzar/agent",
  "type": "registry:block",
  "title": "Pulzar Agent",
  "description": "Agente de chat que combina Thread, Event y Prompt avanzados.",
  "registryDependencies": [
    "https://registry.ai-sdk.dev/all.json"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/pulzar/agent.tsx",
      "content": "\"use client\"\n\nimport React, { useState } from \"react\"\nimport { useThread } from './use-thread'\nimport { Thread, ThreadContent, ThreadScrollButton } from './thread'\nimport { Event as ThreadEvent } from './event'\nimport { Prompt } from './prompt'\n\nimport { Loader } from '@/components/ai-elements/loader'\nimport { id } from \"@instantdb/core\"\n\n// Guard global para evitar doble env√≠o de initialPrompt por Strict Mode (dev)\nconst agentBootGuard: { lastPrompt?: string; lastAt?: number } = (globalThis as any).__pulzarAgentBootGuard || {}\n;(globalThis as any).__pulzarAgentBootGuard = agentBootGuard\n\n\nexport default function Agent({ domain, className, initialPrompt, initialWebSearch, initialReasoningLevel }: { domain?: string; className?: string; initialPrompt?: string; initialWebSearch?: boolean; initialReasoningLevel?: 0 | 1 | 2 | 3 }) {\n  const [webSearch, setWebSearch] = useState(Boolean(initialWebSearch))\n  const [reasoningLevel, setReasoningLevel] = useState<0 | 1 | 2 | 3>(typeof initialReasoningLevel === 'number' ? initialReasoningLevel as 0|1|2|3 : 1)\n  const [threadId] = useState<string>(id())\n  const { events, status, input, handleInputChange, handleSubmit } = useThread({ threadId, url: \"/api/stories/\" + threadId })\n  const [isUploading, setIsUploading] = useState(false)\n  const [attachments, setAttachments] = useState<Array<{ id: string, file: File, previewURL: string, name: string, size?: string, type?: string, status: 'uploading'|'done'|'error', uploadedId?: string }>>([])\n\n  async function handleFilesSelected(files: FileList) {\n    const list = Array.from(files)\n    const previews = list.map((file, idx) => ({ id: `${Date.now()}-${idx}`, file, previewURL: URL.createObjectURL(file), name: file.name, size: `${Math.round(file.size/1024)} KB`, type: file.type, status: 'uploading' as const }))\n    setAttachments((prev) => [...prev, ...previews])\n    setIsUploading(true)\n    try {\n      // Stub upload to backend. We only POST to a placeholder endpoint; backend not implemented yet\n      const form = new FormData()\n      previews.forEach((p) => form.append(\"files\", p.file))\n      const resp = await fetch(`/api/stories/${threadId}/upload`, { method: \"POST\", body: form })\n      const json = await resp.json().catch(() => ({} as any))\n      const serverFiles = Array.isArray(json?.files) ? json.files : []\n      // Update only the batch we just uploaded, by matching the local preview ids\n      setAttachments((prev) => prev.map((p) => {\n        const idx = previews.findIndex((pp) => pp.id === p.id)\n        if (idx === -1) { return p }\n        const f = serverFiles[idx]\n        if (f) { return { ...p, status: 'done', uploadedId: f.id } }\n        return { ...p, status: 'error' }\n      }))\n    } finally {\n      setIsUploading(false)\n    }\n  }\n\n  function handleRemoveAttachment(id: string) {\n    setAttachments((prev) => prev.filter((a) => a.id !== id))\n  }\n\n  return (\n    <main className={[\"min-h-[calc(100vh-64px)] md:h-[calc(100vh-64px)] p-0 h-full\", className || \"\"].join(\" \") }>\n      <div className=\"w-full md:h-full\">\n        <div className=\"px-6 py-6 h-full\">\n          <div className=\"h-full max-w-4xl mx-auto\">\n            <div className=\"flex flex-col h-full\">\n              <Thread className=\"h-full\">\n                <ThreadContent>\n                  {(events || []).map((e) => (\n                    <div key={e.id}>\n                      <ThreadEvent\n                        role={e.role}\n                        parts={Array.isArray((e as any).parts)\n                          ? (e as any).parts\n                          : [{ type: 'text', text: String((e as any)?.payload?.body?.text || '') }]}\n                        isStreaming={status === 'streaming'}\n                      />\n                    </div>\n                  ))}\n                  {status === 'submitted' && <Loader />}\n                </ThreadContent>\n                <ThreadScrollButton />\n              </Thread>\n\n              <div className=\"mt-4\">\n                <Prompt\n                  value={input}\n                  onChange={handleInputChange as any}\n                  onSubmit={handleSubmit}\n                  onToggleVoice={() => {}}\n                  reasoningLevel={reasoningLevel}\n                  onChangeReasoning={setReasoningLevel}\n                  webSearch={webSearch}\n                  onToggleWeb={() => setWebSearch(!webSearch)}\n                  status={status as any}\n                  onFilesSelected={handleFilesSelected}\n                  isUploading={isUploading}\n                  attachments={attachments.map((a) => ({ id: a.id, name: a.name, size: a.size, previewURL: a.previewURL, status: a.status, type: a.type })) as any}\n                  onRemoveAttachment={handleRemoveAttachment}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  )\n}\n\n\n",
      "type": "registry:component",
      "target": "components/pulzar/agent.tsx"
    },
    {
      "path": "registry/new-york/blocks/pulzar/use-thread.ts",
      "content": "\"use client\"\n\nimport React from \"react\"\n\ntype ThreadEvent = { id: string; role: \"user\" | \"assistant\"; parts: Array<any> }\ntype Thread = { key: string; events: ThreadEvent[] }\n\nexport function useThread({ threadId, url }: { threadId: string; url: string }) {\n  const [events, setEvents] = React.useState<ThreadEvent[]>([])\n  const [status, setStatus] = React.useState<\"idle\" | \"streaming\" | \"submitted\">(\"idle\")\n  const [input, setInput] = React.useState(\"\")\n\n  React.useEffect(() => {\n    // no-op initial fetch for demo; could fetch existing thread here\n  }, [threadId, url])\n\n  async function handleSubmit(e: React.FormEvent) {\n    e.preventDefault()\n    if (!input.trim()) {\n      return\n    }\n    setStatus(\"submitted\")\n    try {\n      const res = await fetch(url, { method: \"POST\", headers: { \"Content-Type\": \"application/json\" }, body: JSON.stringify({ text: input }) })\n      const thread: Thread = await res.json()\n      setEvents(thread.events || [])\n      setInput(\"\")\n    } finally {\n      setStatus(\"idle\")\n    }\n  }\n\n  function handleInputChange(e: React.ChangeEvent<HTMLTextAreaElement>) {\n    setInput(e.target.value)\n  }\n\n  return { events, status, input, handleInputChange, handleSubmit }\n}\n\n\n",
      "type": "registry:component",
      "target": "components/pulzar/use-thread.ts"
    }
  ]
}